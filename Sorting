1. Bubble - T O(n^2) 
ðŸ”¸ Idea:
Repeatedly swap adjacent elements if they are in the wrong order. Largest elements "bubble" to the end.

void bubbleSort(int[] arr) {                                                                  
    int n = arr.length;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // swap
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
Input: [5, 1, 4, 2, 8]

Pass 1: [1, 4, 2, 5, 8]  
Pass 2: [1, 2, 4, 5, 8]  
Pass 3: [1, 2, 4, 5, 8] (no swaps)
------------------------------------------------

2. Selection -
Find the minimum element in unsorted part and put it at the beginning.
void selectionSort(int[] arr) {
    int n = arr.length;
    for (int i = 0; i < n - 1; i++) {
        int minIdx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIdx]) {
                minIdx = j;
            }
        }
        // swap
        int temp = arr[i];
        arr[i] = arr[minIdx];
        arr[minIdx] = temp;
    }
}

Input: [64, 25, 12, 22, 11]

Step 1: [11, 25, 12, 22, 64]  
Step 2: [11, 12, 25, 22, 64]  
Step 3: [11, 12, 22, 25, 64]
--------------------------------------------------

3. Insertion - 
Build sorted array one element at a time by inserting elements into the correct position.
void insertionSort(int[] arr) {
    int n = arr.length;
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}
Input: [5, 3, 4, 1]

Step 1: [3, 5, 4, 1]  
Step 2: [3, 4, 5, 1]  
Step 3: [1, 3, 4, 5]

------------------------------------------

4. Merge - 
Divide the array into halves, sort them recursively, and merge.
void mergeSort(int[] arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void merge(int[] arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    int[] L = new int[n1];
    int[] R = new int[n2];
    for (int i = 0; i < n1; i++) L[i] = arr[l + i];
    for (int j = 0; j < n2; j++) R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}
Input: [6, 3, 9, 5]

Divide: [6, 3] and [9, 5]  
Sort: [3, 6], [5, 9]  
Merge: [3, 5, 6, 9]
--------------------------------------------

5. Quick Sort -
Pick a pivot, partition the array so that smaller elements are left, larger are right. Recursively sort both sides.

void quickSort(int[] arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int partition(int[] arr, int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            // swap
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    // swap
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    return i + 1;
}
Input: [10, 7, 8, 9, 1, 5]
Pivot: 5 â†’ Partitioned: [1] 5 [10, 7, 8, 9]  
Continue on both sides
Sorted: [1, 5, 7, 8, 9, 10]
----------------------------------------------------------------------------------------
6. Heap Sort - 
Turn array into a heap (tree structure), extract the largest element repeatedly.
void heapSort(int[] arr) {
    int n = arr.length;
    for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i);
    for (int i = n - 1; i > 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
    }
}

void heapify(int[] arr, int n, int i) {
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l < n && arr[l] > arr[largest]) largest = l;
    if (r < n && arr[r] > arr[largest]) largest = r;

    if (largest != i) {
        int swap = arr[i];
        arr[i] = arr[largest];
        arr[largest] = swap;
        heapify(arr, n, largest);
    }
}
Input: [4, 10, 3, 5, 1]

Build heap: [10, 5, 3, 4, 1]  
Extract max: [5, 4, 3, 1, 10]  
Sorted: [1, 3, 4, 5, 10]
---------------------------------------------------------------------------
7. Counting Sort - 
Count how many times each number appears and reconstruct the array.
void countingSort(int[] arr) {
    int max = Arrays.stream(arr).max().getAsInt();
    int[] count = new int[max + 1];

    for (int num : arr) count[num]++;
    int index = 0;
    for (int i = 0; i < count.length; i++) {
        while (count[i]-- > 0) {
            arr[index++] = i;
        }
    }
}
Input: [4, 2, 2, 8, 3]

Count array: [0, 0, 2, 1, 1, 0, 0, 0, 1]  
Result: [2, 2, 3, 4, 8]
-------------------------------------------------------

8. Radix Sort -
Sort numbers digit by digit (starting from the least significant digit) using Counting Sort.
void radixSort(int[] arr) {
    int max = Arrays.stream(arr).max().getAsInt();
    for (int exp = 1; max / exp > 0; exp *= 10) {
        countingSortByDigit(arr, exp);
    }
}

void countingSortByDigit(int[] arr, int exp) {
    int n = arr.length;
    int[] output = new int[n];
    int[] count = new int[10];

    for (int i = 0; i < n; i++) count[(arr[i] / exp) % 10]++;
    for (int i = 1; i < 10; i++) count[i] += count[i - 1];

    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    for (int i = 0; i < n; i++) arr[i] = output[i];
}
Input: [170, 45, 75, 90, 802, 24, 2, 66]

Sort by 1s place: [170, 90, 802, 2, 24, 45, 75, 66]  
Sort by 10s: [802, 2, 24, 45, 66, 170, 75, 90]  
Sort by 100s: [2, 24, 45, 66, 75, 90, 170, 802]
-----------------------------------------------------------------------
9. Bucket Sort -
Divide array into buckets, sort each bucket individually, and then combine them.
void bucketSort(float[] arr) {
    int n = arr.length;
    if (n <= 0) return;

    @SuppressWarnings("unchecked")
    List<Float>[] buckets = new List[n];
    for (int i = 0; i < n; i++) buckets[i] = new ArrayList<>();

    for (float value : arr) {
        int index = (int) (value * n);
        buckets[index].add(value);
    }

    for (List<Float> bucket : buckets) Collections.sort(bucket);

    int index = 0;
    for (List<Float> bucket : buckets) {
        for (float num : bucket) {
            arr[index++] = num;
        }
    }
}
Input: [0.42, 0.32, 0.23, 0.52, 0.25, 0.47]

Create buckets:  
[0.23, 0.25], [0.32], [0.42, 0.47], [0.52]  
Sort buckets â†’ [0.23, 0.25, 0.32, 0.42, 0.47, 0.52]


